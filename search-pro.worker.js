const nt="ENTRIES",V="KEYS",T="VALUES",F="";class D{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=E(this._path);if(E(s)===F)return{done:!1,value:this.result()};const n=t.get(E(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=E(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>E(t)).filter(t=>t!==F).join("")}value(){return E(this._path).node.get(F)}result(){switch(this._type){case T:return this.value();case V:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const E=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(t===void 0)return n;const o=t.length+1,u=o+s,i=new Uint8Array(u*o).fill(s+1);for(let r=0;r<o;++r)i[r]=r;for(let r=1;r<u;++r)i[r*o]=r;return R(e,t,s,n,i,1,o,""),n},R=(e,t,s,n,o,u,i,r)=>{const d=u*i;t:for(const l of e.keys())if(l===F){const a=o[d-1];a<=s&&n.set(r,[e.get(l),a])}else{let a=u;for(let h=0;h<l.length;++h,++a){const m=l[h],p=i*a,f=p-i;let c=o[p];const g=Math.max(0,a-s-1),_=Math.min(i-1,a+s);for(let y=g;y<_;++y){const b=m!==t[y],z=o[f+y]+ +b,A=o[f+y+1]+1,w=o[p+y]+1,L=o[p+y+1]=Math.min(z,A,w);L<c&&(c=L)}if(c>s)continue t}R(e.get(l),t,s,n,o,a,i,r+l)}};class C{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=x(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,u]=O(n);for(const i of o.keys())if(i!==F&&i.startsWith(u)){const r=new Map;return r.set(i.slice(u.length),o.get(i)),new C(r,t)}}return new C(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,ut(this._tree,t)}entries(){return new D(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=I(this._tree,t);return s!==void 0?s.get(F):void 0}has(t){const s=I(this._tree,t);return s!==void 0&&s.has(F)}keys(){return new D(this,V)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,M(this._tree,t).set(F,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);return n.set(F,s(n.get(F))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=M(this._tree,t);let o=n.get(F);return o===void 0&&n.set(F,o=s()),o}values(){return new D(this,T)}[Symbol.iterator](){return this.entries()}static from(t){const s=new C;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return C.from(Object.entries(t))}}const x=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==F&&t.startsWith(n))return s.push([e,n]),x(e.get(n),t.slice(n.length),s);return s.push([e,t]),x(void 0,"",s)},I=(e,t)=>{if(t.length===0||e==null)return e;for(const s of e.keys())if(s!==F&&t.startsWith(s))return I(e.get(s),t.slice(s.length))},M=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const u of e.keys())if(u!==F&&t[n]===u[0]){const i=Math.min(s-n,u.length);let r=1;for(;r<i&&t[n+r]===u[r];)++r;const d=e.get(u);if(r===u.length)e=d;else{const l=new Map;l.set(u.slice(r),d),e.set(t.slice(n,n+r),l),e.delete(u),e=l}n+=r;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},ut=(e,t)=>{const[s,n]=x(e,t);if(s!==void 0){if(s.delete(F),s.size===0)W(n);else if(s.size===1){const[o,u]=s.entries().next().value;$(n,o,u)}}},W=e=>{if(e.length===0)return;const[t,s]=O(e);if(t.delete(s),t.size===0)W(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==F&&$(e.slice(0,-1),n,o)}},$=(e,t,s)=>{if(e.length===0)return;const[n,o]=O(e);n.set(o+t,s),n.delete(o)},O=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},rt=/[\n\r -#%-*,-/:;?@[-\]_{}\u00A0\u00A1\u00A7\u00AB\u00B6\u00B7\u00BB\u00BF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C77\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166E\u1680\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2000-\u200A\u2010-\u2029\u202F-\u2043\u2045-\u2051\u2053-\u205F\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4F\u3000-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]+/u,S="or",q="and",ct="and_not",lt=(e,t)=>{e.includes(t)||e.push(t)},P=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},G=({score:e},{score:t})=>t-e,ht=()=>new Map,k=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},N=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,dt={[S]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:u,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),P(n.terms,u)}}return e},[q]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:u,terms:i,match:r}=t.get(n);P(o.terms,i),s.set(n,{score:o.score+u,terms:o.terms,match:Object.assign(o.match,r)})}return s},[ct]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},at=(e,t,s,n,o,u)=>{const{k:i,b:r,d}=u;return Math.log(1+(s-t+.5)/(t+.5))*(d+e*(i+1)/(e+i*(1-r+r*n/o)))},ft=e=>(t,s,n)=>{const o=typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy||!1,u=typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0;return{term:t,fuzzy:o,prefix:u}},H=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},gt=(e,t,s,n)=>{if(!e._index.has(n)){H(e,s,t,n);return}const o=e._index.fetch(n,ht),u=o.get(t);u==null||u.get(s)==null?H(e,s,t,n):u.get(s)<=1?u.size<=1?o.delete(t):u.delete(s):u.set(s,u.get(s)-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},pt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(rt),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{typeof console?.[e]=="function"&&console[e](t)},autoVacuum:!0},J={combineWith:S,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},Ft={combineWith:q,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},U={minDirtFactor:.1,minDirtCount:20},yt={..._t,...U},Y=(e,t=S)=>{if(e.length===0)return new Map;const s=t.toLowerCase();return e.reduce(dt[s])||new Map},B=(e,t,s,n,o,u,i,r,d=new Map)=>{if(o==null)return d;for(const l of Object.keys(u)){const a=u[l],h=e._fieldIds[l],m=o.get(h);if(m==null)continue;let p=m.size;const f=e._avgFieldLength[h];for(const c of m.keys()){if(!e._documentIds.has(c)){gt(e,h,c,s),p-=1;continue}const g=i?i(e._documentIds.get(c),s,e._storedFields.get(c)):1;if(!g)continue;const _=m.get(c),y=e._fieldLength.get(c)[h],b=at(_,p,e._documentCount,y,f,r),z=n*a*g*b,A=d.get(c);if(A){A.score+=z,lt(A.terms,t);const w=N(A.match,s);w?w.push(l):A.match[s]=[l]}else d.set(c,{score:z,terms:[t],match:{[s]:[l]}})}}return d},At=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields||e._options.fields).reduce((c,g)=>({...c,[g]:N(n.boost,g)||1}),{}),{boostDocument:u,weights:i,maxFuzzy:r,bm25:d}=n,{fuzzy:l,prefix:a}={...J.weights,...i},h=e._index.get(t.term),m=B(e,t.term,t.term,1,h,o,u,d);let p,f;if(t.prefix&&(p=e._index.atPrefix(t.term)),t.fuzzy){const c=t.fuzzy===!0?.2:t.fuzzy,g=c<1?Math.min(r,Math.round(t.term.length*c)):c;g&&(f=e._index.fuzzyGet(t.term,g))}if(p)for(const[c,g]of p){const _=c.length-t.term.length;if(!_)continue;f?.delete(c);const y=a*c.length/(c.length+.3*_);B(e,t.term,c,y,g,o,u,d,m)}if(f)for(const c of f.keys()){const[g,_]=f.get(c);if(!_)continue;const y=l*c.length/(c.length+_);B(e,t.term,c,y,g,o,u,d,m)}return m},X=(e,t,s={})=>{if(typeof t!="string"){const a={...s,...t,queries:void 0},h=t.queries.map(m=>X(e,m,a));return Y(h,a.combineWith)}const{tokenize:n,processTerm:o,searchOptions:u}=e._options,i={tokenize:n,processTerm:o,...u,...s},{tokenize:r,processTerm:d}=i,l=r(t).flatMap(a=>d(a)).filter(a=>!!a).map(ft(i)).map(a=>At(e,a,i));return Y(l,i.combineWith)},K=(e,t,s={})=>{const n=X(e,t,s),o=[];for(const[u,{score:i,terms:r,match:d}]of n){const l=r.length,a={id:e._documentIds.get(u),score:i*l,terms:Object.keys(d),match:d};Object.assign(a,e._storedFields.get(u)),(s.filter==null||s.filter(a))&&o.push(a)}return o.sort(G),o},Ct=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:u,terms:i}of K(e,t,s)){const r=i.join(" "),d=n.get(r);d!=null?(d.score+=u,d.count+=1):n.set(r,{score:u,terms:i,count:1})}const o=[];for(const[u,{score:i,terms:r,count:d}]of n)o.push({suggestion:u,terms:r,score:i/d});return o.sort(G),o};class Et{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(t?.fields==null)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...pt,...t,autoVacuum:s,searchOptions:{...J,...t.searchOptions||{}},autoSuggestOptions:{...Ft,...t.autoSuggestOptions||{}}},this._index=new C,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=U,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[u,i]of n)o[u]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,serializationVersion:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const zt=({index:e,documentCount:t,nextId:s,documentIds:n,fieldIds:o,fieldLength:u,averageFieldLength:i,storedFields:r,dirtCount:d,serializationVersion:l},a)=>{if(l!==1&&l!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const h=new Et(a);h._documentCount=t,h._nextId=s,h._documentIds=k(n),h._idToShortId=new Map,h._fieldIds=o,h._fieldLength=k(u),h._avgFieldLength=i,h._storedFields=k(r),h._dirtCount=d||0,h._index=new C;for(const[m,p]of h._documentIds)h._idToShortId.set(p,m);for(const[m,p]of e){const f=new Map;for(const c of Object.keys(p)){let g=p[c];l===1&&(g=g.ds),f.set(parseInt(c,10),k(g))}h._index.set(m,f)}return h},Q=Object.entries,wt=Object.fromEntries,j=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let u=0,i=0;const r=(l,a=!1)=>{let h="";i===0?h=l.length>20?`… ${l.slice(-20)}`:l:a?h=l.length+i>100?`${l.slice(0,100-i)}… `:l:h=l.length>20?`${l.slice(0,20)} … ${l.slice(-20)}`:l,h&&o.push(h),i+=h.length,a||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let d=s.indexOf(n,u);if(d===-1)return null;for(;d>=0;){const l=d+n.length;if(r(e.slice(u,d)),u=l,i>100)break;d=s.indexOf(n,u)}return i<100&&r(e.slice(u),!0),o},Z=/[\u4e00-\u9fa5]/g,tt=(e={})=>({fuzzy:.2,prefix:!0,processTerm:t=>{const s=t.match(Z)||[],n=t.replace(Z,"").toLowerCase();return n?[n,...s]:[...s]},...e}),xt=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),kt=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),et=(e,t,s={})=>{const n={};return K(t,e,tt({boost:{h:2,t:1,c:4},...s})).forEach(o=>{const{id:u,terms:i,score:r}=o,d=u.includes("@"),l=u.includes("#"),[a,h]=u.split(/[#@]/),m=i.sort((f,c)=>f.length-c.length).filter((f,c)=>i.slice(c+1).every(g=>!g.includes(f))),{contents:p}=n[a]??={title:"",contents:[]};if(d)p.push([{type:"customField",key:a,index:h,display:m.map(f=>o.c.map(c=>j(c,f))).flat().filter(f=>f!==null)},r]);else{const f=m.map(c=>j(o.h,c)).filter(c=>c!==null);if(f.length&&p.push([{type:l?"heading":"title",key:a,...l&&{anchor:h},display:f},r]),"t"in o)for(const c of o.t){const g=m.map(_=>j(c,_)).filter(_=>_!==null);g.length&&p.push([{type:"text",key:a,...l&&{anchor:h},display:g},r])}}}),Q(n).sort(([,o],[,u])=>"max"==="total"?xt(o,u):kt(o,u)).map(([o,{title:u,contents:i}])=>{if(!u){const r=it(t,o);r&&(u=r.h)}return{title:u,contents:i.map(([r])=>r)}})},st=(e,t,s={})=>Ct(t,e,tt(s)).map(({suggestion:n})=>n),v=wt(Q(JSON.parse("{\"/\":{\"documentCount\":71,\"nextId\":71,\"documentIds\":{\"0\":\"v-184f4da6\",\"1\":\"v-184f4da6#你好\",\"2\":\"v-768b42ed\",\"3\":\"v-768b42ed#力扣题-最长递增子序列\",\"4\":\"v-fb476c86\",\"5\":\"v-fb476c86#一-keepalive组件的实现原理\",\"6\":\"v-fb476c86#二-teleport组件的实现原理\",\"7\":\"v-fb476c86#三-transition组件的实现原理\",\"8\":\"v-fb476c86#四-总结\",\"9\":\"v-fb476c86@0\",\"10\":\"v-fb476c86@1\",\"11\":\"v-439497f1\",\"12\":\"v-439497f1#响应式设计\",\"13\":\"v-439497f1#渲染器设计\",\"14\":\"v-439497f1#vue设计与实现第七章-渲染器的设计\",\"15\":\"v-439497f1#vue设计与实现第八章-挂载与更新\",\"16\":\"v-439497f1#_8-1-8-3-挂在子节点和元素属性和正确的设置元素属性\",\"17\":\"v-439497f1#_8-4-class的处理\",\"18\":\"v-439497f1#_8-5-卸载操作\",\"19\":\"v-439497f1#_8-6-区分vnode的类型\",\"20\":\"v-439497f1#_8-7-事件的处理\",\"21\":\"v-439497f1#_8-8-事件冒泡与更新时机问题\",\"22\":\"v-439497f1#_8-9-更新子节点\",\"23\":\"v-439497f1#_8-10-文本注释和注释节点\",\"24\":\"v-439497f1#_8-11-fragment\",\"25\":\"v-439497f1#_8-12-总结\",\"26\":\"v-439497f1#vue设计与实现第九章-简单diff算法\",\"27\":\"v-439497f1#_9-1-减少dom操作的性能开销\",\"28\":\"v-439497f1#_9-2-dom复用和key的作用\",\"29\":\"v-439497f1#_9-3-找到需要移动的元素\",\"30\":\"v-439497f1#_9-4-如何移动\",\"31\":\"v-439497f1#_9-5-添加新元素\",\"32\":\"v-439497f1#_9-6-移除不存在的元素\",\"33\":\"v-439497f1#_9-7-总结\",\"34\":\"v-439497f1#vue设计与实现第十章-双端diff算法\",\"35\":\"v-439497f1#_10-1-双端比较的原理\",\"36\":\"v-439497f1#_10-2-添加新元素\",\"37\":\"v-439497f1#_10-3-移除旧节点\",\"38\":\"v-439497f1#vue设计与实现第十一章-快速diff算法\",\"39\":\"v-439497f1#_11-1-相同前置和后置元素\",\"40\":\"v-439497f1#_11-2-判断是否需要进行dom的移动\",\"41\":\"v-439497f1#_11-3-如何移动\",\"42\":\"v-439497f1#_11-4-总结\",\"43\":\"v-439497f1#vue设计与实现第十二章-组件的实现原理\",\"44\":\"v-439497f1@0\",\"45\":\"v-439497f1@1\",\"46\":\"v-155c4e9e\",\"47\":\"v-155c4e9e#一-介绍\",\"48\":\"v-155c4e9e#传统的渲染方式\",\"49\":\"v-155c4e9e@0\",\"50\":\"v-155c4e9e@1\",\"51\":\"v-96639358\",\"52\":\"v-96639358#编译器的流程以及parser的实现\",\"53\":\"v-96639358@0\",\"54\":\"v-96639358@1\",\"55\":\"v-16febab1\",\"56\":\"v-16febab1#_1-引言\",\"57\":\"v-16febab1#_2-组件的渲染\",\"58\":\"v-16febab1#_3-组件状态与自更新\",\"59\":\"v-16febab1#_4-组件的实例与组件的生命周期\",\"60\":\"v-16febab1#_5-props与组件的被动更新\",\"61\":\"v-16febab1@0\",\"62\":\"v-16febab1@1\",\"63\":\"v-5ff272e6\",\"64\":\"v-5ff272e6#常用项\",\"65\":\"v-5ff272e6#可选项\",\"66\":\"v-5ff272e6@0\",\"67\":\"v-5ff272e6@1\",\"68\":\"v-30e3f50e\",\"69\":\"v-1eea5c8f\",\"70\":\"v-28e4aa5b\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[1],\"3\":[2],\"4\":[1],\"5\":[2],\"6\":[2],\"7\":[2],\"8\":[2],\"9\":[null,null,2],\"10\":[null,null,3],\"11\":[1],\"12\":[1],\"13\":[1],\"14\":[2],\"15\":[2],\"16\":[4],\"17\":[3],\"18\":[3],\"19\":[3],\"20\":[3],\"21\":[2],\"22\":[3],\"23\":[3],\"24\":[3],\"25\":[3],\"26\":[2],\"27\":[3],\"28\":[3],\"29\":[3],\"30\":[3],\"31\":[3],\"32\":[3],\"33\":[3],\"34\":[2],\"35\":[3],\"36\":[3],\"37\":[3],\"38\":[2],\"39\":[3],\"40\":[3],\"41\":[3],\"42\":[3],\"43\":[2],\"44\":[null,null,1],\"45\":[null,null,3],\"46\":[1],\"47\":[2],\"48\":[1],\"49\":[null,null,1],\"50\":[null,null,3],\"51\":[1],\"52\":[1],\"53\":[null,null,3],\"54\":[null,null,3],\"55\":[1],\"56\":[2],\"57\":[2],\"58\":[2],\"59\":[2],\"60\":[2],\"61\":[null,null,1],\"62\":[null,null,2],\"63\":[1],\"64\":[1],\"65\":[1],\"66\":[null,null,1],\"67\":[null,null,1],\"68\":[1],\"69\":[1],\"70\":[1]},\"averageFieldLength\":[2.1083974250134836,null,0.7031380668209312],\"storedFields\":{\"0\":{\"h\":\"博主简介\"},\"1\":{\"h\":\"你好\"},\"2\":{\"h\":\"力扣\"},\"3\":{\"h\":\"力扣题：最长递增子序列\"},\"4\":{\"h\":\"内建组件和模块\"},\"5\":{\"h\":\"一.keepAlive组件的实现原理\"},\"6\":{\"h\":\"二.Teleport组件的实现原理\"},\"7\":{\"h\":\"三.Transition组件的实现原理\"},\"8\":{\"h\":\"四.总结\"},\"9\":{\"c\":[\"源码\",\"网络\"]},\"10\":{\"c\":[\"Vue\",\"KeepAlive\",\"HTTP\"]},\"11\":{\"h\":\"响应式设计和渲染器设计\"},\"12\":{\"h\":\"响应式设计\"},\"13\":{\"h\":\"渲染器设计\"},\"14\":{\"h\":\"vue设计与实现第七章：渲染器的设计\"},\"15\":{\"h\":\"vue设计与实现第八章：挂载与更新\"},\"16\":{\"h\":\"8.1-8.3：挂在子节点和元素属性和正确的设置元素属性\"},\"17\":{\"h\":\"8.4：class的处理\"},\"18\":{\"h\":\"8.5：卸载操作\"},\"19\":{\"h\":\"8.6：区分vnode的类型\"},\"20\":{\"h\":\"8.7：事件的处理\"},\"21\":{\"h\":\"8.8：事件冒泡与更新时机问题\"},\"22\":{\"h\":\"8.9：更新子节点\"},\"23\":{\"h\":\"8.10：文本注释和注释节点\"},\"24\":{\"h\":\"8.11：Fragment\"},\"25\":{\"h\":\"8.12：总结\"},\"26\":{\"h\":\"vue设计与实现第九章：简单Diff算法\"},\"27\":{\"h\":\"9.1：减少DOM操作的性能开销\"},\"28\":{\"h\":\"9.2：DOM复用和key的作用\"},\"29\":{\"h\":\"9.3：找到需要移动的元素\"},\"30\":{\"h\":\"9.4：如何移动\"},\"31\":{\"h\":\"9.5：添加新元素\"},\"32\":{\"h\":\"9.6：移除不存在的元素\"},\"33\":{\"h\":\"9.7：总结\"},\"34\":{\"h\":\"vue设计与实现第十章：双端Diff算法\"},\"35\":{\"h\":\"10.1：双端比较的原理\"},\"36\":{\"h\":\"10.2：添加新元素\"},\"37\":{\"h\":\"10.3：移除旧节点\"},\"38\":{\"h\":\"vue设计与实现第十一章：快速Diff算法\"},\"39\":{\"h\":\"11.1：相同前置和后置元素\"},\"40\":{\"h\":\"11.2：判断是否需要进行DOM的移动\"},\"41\":{\"h\":\"11.3：如何移动\"},\"42\":{\"h\":\"11.4：总结\"},\"43\":{\"h\":\"vue设计与实现第十二章：组件的实现原理\"},\"44\":{\"c\":[\"源码\"]},\"45\":{\"c\":[\"Vue\",\"VNode\",\"AST\"]},\"46\":{\"h\":\"服务端渲染\"},\"47\":{\"h\":\"一.介绍\"},\"48\":{\"h\":\"传统的渲染方式\"},\"49\":{\"c\":[\"源码\"]},\"50\":{\"c\":[\"Vue\",\"客户端渲染\",\"服务端渲染\"]},\"51\":{\"h\":\"模板编译器\"},\"52\":{\"h\":\"编译器的流程以及parser的实现\"},\"53\":{\"c\":[\"源码\",\"算法\",\"编译器\"]},\"54\":{\"c\":[\"Vue\",\"状态机\",\"AST\"]},\"55\":{\"h\":\"组件实现原理\"},\"56\":{\"h\":\"1.引言\"},\"57\":{\"h\":\"2.组件的渲染\"},\"58\":{\"h\":\"3.组件状态与自更新\"},\"59\":{\"h\":\"4.组件的实例与组件的生命周期\"},\"60\":{\"h\":\"5.props与组件的被动更新\"},\"61\":{\"c\":[\"源码\"]},\"62\":{\"c\":[\"Vue\",\"AST\"]},\"63\":{\"h\":\"frontmatter配置\"},\"64\":{\"h\":\"常用项\"},\"65\":{\"h\":\"可选项\"},\"66\":{\"c\":[\"配置\"]},\"67\":{\"c\":[\"元信息\"]},\"68\":{\"h\":\"Algorithm\"},\"69\":{\"h\":\"Vue源码\"},\"70\":{\"h\":\"杂项\"}},\"dirtCount\":0,\"index\":[[\"杂项\",{\"0\":{\"70\":1}}],[\"algorithm\",{\"0\":{\"68\":1}}],[\"ast\",{\"2\":{\"45\":1,\"54\":1,\"62\":1}}],[\"元信息\",{\"2\":{\"67\":1}}],[\"配置\",{\"2\":{\"66\":1}}],[\"可选项\",{\"0\":{\"65\":1}}],[\"常用项\",{\"0\":{\"64\":1}}],[\"frontmatter配置\",{\"0\":{\"63\":1}}],[\"fragment\",{\"0\":{\"24\":1}}],[\"props与组件的被动更新\",{\"0\":{\"60\":1}}],[\"引言\",{\"0\":{\"56\":1}}],[\"组件状态与自更新\",{\"0\":{\"58\":1}}],[\"组件的实例与组件的生命周期\",{\"0\":{\"59\":1}}],[\"组件的实现原理\",{\"0\":{\"43\":1}}],[\"组件的渲染\",{\"0\":{\"57\":1}}],[\"组件实现原理\",{\"0\":{\"55\":1}}],[\"状态机\",{\"2\":{\"54\":1}}],[\"编译器\",{\"2\":{\"53\":1}}],[\"编译器的流程以及parser的实现\",{\"0\":{\"52\":1}}],[\"算法\",{\"2\":{\"53\":1}}],[\"模板编译器\",{\"0\":{\"51\":1}}],[\"客户端渲染\",{\"2\":{\"50\":1}}],[\"传统的渲染方式\",{\"0\":{\"48\":1}}],[\"介绍\",{\"0\":{\"47\":1}}],[\"服务端渲染\",{\"0\":{\"46\":1},\"2\":{\"50\":1}}],[\"vnode\",{\"2\":{\"45\":1}}],[\"vue源码\",{\"0\":{\"69\":1}}],[\"vue设计与实现第十二章\",{\"0\":{\"43\":1}}],[\"vue设计与实现第十一章\",{\"0\":{\"38\":1}}],[\"vue设计与实现第十章\",{\"0\":{\"34\":1}}],[\"vue设计与实现第九章\",{\"0\":{\"26\":1}}],[\"vue设计与实现第八章\",{\"0\":{\"15\":1}}],[\"vue设计与实现第七章\",{\"0\":{\"14\":1}}],[\"vue\",{\"2\":{\"10\":1,\"45\":1,\"50\":1,\"54\":1,\"62\":1}}],[\"判断是否需要进行dom的移动\",{\"0\":{\"40\":1}}],[\"相同前置和后置元素\",{\"0\":{\"39\":1}}],[\"快速diff算法\",{\"0\":{\"38\":1}}],[\"移除旧节点\",{\"0\":{\"37\":1}}],[\"移除不存在的元素\",{\"0\":{\"32\":1}}],[\"双端比较的原理\",{\"0\":{\"35\":1}}],[\"双端diff算法\",{\"0\":{\"34\":1}}],[\"添加新元素\",{\"0\":{\"31\":1,\"36\":1}}],[\"如何移动\",{\"0\":{\"30\":1,\"41\":1}}],[\"找到需要移动的元素\",{\"0\":{\"29\":1}}],[\"dom复用和key的作用\",{\"0\":{\"28\":1}}],[\"2\",{\"0\":{\"28\":1,\"36\":1,\"40\":1,\"57\":1}}],[\"减少dom操作的性能开销\",{\"0\":{\"27\":1}}],[\"简单diff算法\",{\"0\":{\"26\":1}}],[\"文本注释和注释节点\",{\"0\":{\"23\":1}}],[\"更新子节点\",{\"0\":{\"22\":1}}],[\"9\",{\"0\":{\"22\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"31\":1,\"32\":1,\"33\":1}}],[\"事件冒泡与更新时机问题\",{\"0\":{\"21\":1}}],[\"事件的处理\",{\"0\":{\"20\":1}}],[\"7\",{\"0\":{\"20\":1,\"33\":1}}],[\"区分vnode的类型\",{\"0\":{\"19\":1}}],[\"6\",{\"0\":{\"19\":1,\"32\":1}}],[\"卸载操作\",{\"0\":{\"18\":1}}],[\"5\",{\"0\":{\"18\":1,\"31\":1,\"60\":1}}],[\"class的处理\",{\"0\":{\"17\":1}}],[\"4\",{\"0\":{\"17\":1,\"30\":1,\"42\":1,\"59\":1}}],[\"挂在子节点和元素属性和正确的设置元素属性\",{\"0\":{\"16\":1}}],[\"挂载与更新\",{\"0\":{\"15\":1}}],[\"3\",{\"0\":{\"16\":1,\"29\":1,\"37\":1,\"41\":1,\"58\":1}}],[\"12\",{\"0\":{\"25\":1}}],[\"11\",{\"0\":{\"24\":1,\"39\":1,\"40\":1,\"41\":1,\"42\":1}}],[\"10\",{\"0\":{\"23\":1,\"35\":1,\"36\":1,\"37\":1}}],[\"1\",{\"0\":{\"16\":1,\"27\":1,\"35\":1,\"39\":1,\"56\":1}}],[\"8\",{\"0\":{\"16\":2,\"17\":1,\"18\":1,\"19\":1,\"20\":1,\"21\":2,\"22\":1,\"23\":1,\"24\":1,\"25\":1}}],[\"渲染器的设计\",{\"0\":{\"14\":1}}],[\"渲染器设计\",{\"0\":{\"13\":1}}],[\"响应式设计\",{\"0\":{\"12\":1}}],[\"响应式设计和渲染器设计\",{\"0\":{\"11\":1}}],[\"http\",{\"2\":{\"10\":1}}],[\"keepalive\",{\"2\":{\"10\":1}}],[\"keepalive组件的实现原理\",{\"0\":{\"5\":1}}],[\"网络\",{\"2\":{\"9\":1}}],[\"源码\",{\"2\":{\"9\":1,\"44\":1,\"49\":1,\"53\":1,\"61\":1}}],[\"总结\",{\"0\":{\"8\":1,\"25\":1,\"33\":1,\"42\":1}}],[\"四\",{\"0\":{\"8\":1}}],[\"transition组件的实现原理\",{\"0\":{\"7\":1}}],[\"teleport组件的实现原理\",{\"0\":{\"6\":1}}],[\"三\",{\"0\":{\"7\":1}}],[\"二\",{\"0\":{\"6\":1}}],[\"一\",{\"0\":{\"5\":1,\"47\":1}}],[\"内建组件和模块\",{\"0\":{\"4\":1}}],[\"最长递增子序列\",{\"0\":{\"3\":1}}],[\"力扣题\",{\"0\":{\"3\":1}}],[\"力扣\",{\"0\":{\"2\":1}}],[\"你好\",{\"0\":{\"1\":1}}],[\"博主简介\",{\"0\":{\"0\":1}}]],\"serializationVersion\":2}}")).map(([e,t])=>[e,zt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n}})=>{e==="suggest"?self.postMessage(st(t,v[s],n)):e==="search"?self.postMessage(et(t,v[s],n)):self.postMessage({suggestions:st(t,v[s],n),results:et(t,v[s],n)})};
//# sourceMappingURL=index.js.map
