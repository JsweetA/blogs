import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,a as n,b as s,d as l,e as a}from"./app-4f88bd9e.js";const i={},u=a('<p><a name="YR0ir"></a></p><h3 id="一-keepalive组件的实现原理" tabindex="-1"><a class="header-anchor" href="#一-keepalive组件的实现原理" aria-hidden="true">#</a> 一.keepAlive组件的实现原理</h3><p><code>KeepAlive</code> 又称<code>HTTP</code> 持久连接（HTTP persistent connection），其作用是允许多个请求或响应共用一个 TCP 连接。由于每个<code>HTTP</code>请求都会建立一个新的连接并且在结束时销毁。所以当多个请求进行发送时就会导致额外的性能开销。但在响应头里把<code>Connection</code>字段的值设置成<code>keep-alive</code>，这样就能使用长连接的<code>HTTP</code>协议。</p>',3),r={href:"https://zhuanlan.zhihu.com/p/113286469",target:"_blank",rel:"noopener noreferrer"},k=a(`<p>同理，对于一个组件，反复的挂载和卸载会导致很多额外的开销，<code>KeepAlive</code>就是用来解决这个问题的。<br><code>KeepAlive</code>本质上是对组件的缓存，将不用的组件缓存到一个看不见的地方，卸载的时候把他放进去，用的时候再拿出来。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">01</span> <span class="token keyword">const</span> KeepAlive <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token number">02</span>   <span class="token comment">// KeepAlive 组件独有的属性，用作标识</span>
<span class="token number">03</span>   <span class="token literal-property property">__isKeepAlive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token number">04</span>   <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">05</span>     <span class="token comment">// 创建一个缓存对象</span>
<span class="token number">06</span>     <span class="token comment">// key: vnode.type</span>
<span class="token number">07</span>     <span class="token comment">// value: vnode</span>
<span class="token number">08</span>     <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">09</span>     <span class="token comment">// 当前 KeepAlive 组件的实例</span>
<span class="token number">10</span>     <span class="token keyword">const</span> instance <span class="token operator">=</span> currentInstance
<span class="token number">11</span>     <span class="token comment">// 对于 KeepAlive 组件来说，它的实例上存在特殊的 keepAliveCtx 对象，该对象由渲染器注入</span>
<span class="token number">12</span>     <span class="token comment">// 该对象会暴露渲染器的一些内部方法，其中 move 函数用来将一段 DOM 移动到另一个容器中</span>
<span class="token number">13</span>     <span class="token keyword">const</span> <span class="token punctuation">{</span> move<span class="token punctuation">,</span> createElement <span class="token punctuation">}</span> <span class="token operator">=</span> instance<span class="token punctuation">.</span>keepAliveCtx
<span class="token number">14</span>
<span class="token number">15</span>     <span class="token comment">// 创建隐藏容器</span>
<span class="token number">16</span>     <span class="token keyword">const</span> storageContainer <span class="token operator">=</span> <span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token number">17</span>
<span class="token number">18</span>     <span class="token comment">// KeepAlive 组件的实例上会被添加两个内部函数，分别是 _deActivate 和 _activate</span>
<span class="token number">19</span>     <span class="token comment">// 这两个函数会在渲染器中被调用</span>
<span class="token number">20</span>     instance<span class="token punctuation">.</span><span class="token function-variable function">_deActivate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">21</span>       <span class="token function">move</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> storageContainer<span class="token punctuation">)</span>
<span class="token number">22</span>     <span class="token punctuation">}</span>
<span class="token number">23</span>     instance<span class="token punctuation">.</span><span class="token function-variable function">_activate</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">24</span>       <span class="token function">move</span><span class="token punctuation">(</span>vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
<span class="token number">25</span>     <span class="token punctuation">}</span>
<span class="token number">26</span>
<span class="token number">27</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">28</span>       <span class="token comment">// KeepAlive 的默认插槽就是要被 KeepAlive 的组件</span>
<span class="token number">29</span>       <span class="token keyword">let</span> rawVNode <span class="token operator">=</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">30</span>       <span class="token comment">// 如果不是组件，直接渲染即可，因为非组件的虚拟节点无法被 KeepAlive</span>
<span class="token number">31</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> rawVNode<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">32</span>         <span class="token keyword">return</span> rawVNode
<span class="token number">33</span>       <span class="token punctuation">}</span>
<span class="token number">34</span>
<span class="token number">35</span>       <span class="token comment">// 在挂载时先获取缓存的组件 vnode</span>
<span class="token number">36</span>       <span class="token keyword">const</span> cachedVNode <span class="token operator">=</span> cache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>rawVNode<span class="token punctuation">.</span>type<span class="token punctuation">)</span>
<span class="token number">37</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>cachedVNode<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">38</span>         <span class="token comment">// 如果有缓存的内容，则说明不应该执行挂载，而应该执行激活</span>
<span class="token number">39</span>         <span class="token comment">// 继承组件实例</span>
<span class="token number">40</span>         rawVNode<span class="token punctuation">.</span>component <span class="token operator">=</span> cachedVNode<span class="token punctuation">.</span>component
<span class="token number">41</span>         <span class="token comment">// 在 vnode 上添加 keptAlive 属性，标记为 true，避免渲染器重新挂载它</span>
<span class="token number">42</span>         rawVNode<span class="token punctuation">.</span>keptAlive <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token number">43</span>       <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token number">44</span>         <span class="token comment">// 如果没有缓存，则将其添加到缓存中，这样下次激活组件时就不会执行新的挂载动作了</span>
<span class="token number">45</span>         cache<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>rawVNode<span class="token punctuation">.</span>type<span class="token punctuation">,</span> rawVNode<span class="token punctuation">)</span>
<span class="token number">46</span>       <span class="token punctuation">}</span>
<span class="token number">47</span>
<span class="token number">48</span>       <span class="token comment">// 在组件 vnode 上添加 shouldKeepAlive 属性，并标记为 true，避免渲染器真的将组件卸载</span>
<span class="token number">49</span>       rawVNode<span class="token punctuation">.</span>shouldKeepAlive <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token number">50</span>       <span class="token comment">// 将 KeepAlive 组件的实例也添加到 vnode 上，以便在渲染器中访问</span>
<span class="token number">51</span>       rawVNode<span class="token punctuation">.</span>keepAliveInstance <span class="token operator">=</span> instance
<span class="token number">52</span>
<span class="token number">53</span>       <span class="token comment">// 渲染组件 vnode</span>
<span class="token number">54</span>       <span class="token keyword">return</span> rawVNode
<span class="token number">55</span>     <span class="token punctuation">}</span>
<span class="token number">56</span>   <span class="token punctuation">}</span>
<span class="token number">57</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过以上的构建就得到了一些信息，可以明确的知道对于该组件是否是第一次挂载以及后期的激活和失活。</p><hr><p>对<code>KeepAlive</code>组件的实现后，就是对<code>include</code>和<code>exclude</code>以及<code>max</code>的实现了。对于<code>max</code>，就差不多是一道设计一个缓存机制的算法题，其他两个就只是单纯匹配了。总体设计不难。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">01</span> <span class="token keyword">const</span> cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">02</span> <span class="token keyword">const</span> KeepAlive <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token number">03</span>   <span class="token literal-property property">__isKeepAlive</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
<span class="token number">04</span>   <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token number">05</span>     <span class="token literal-property property">include</span><span class="token operator">:</span> RegExp<span class="token punctuation">,</span>
<span class="token number">06</span>     <span class="token literal-property property">exclude</span><span class="token operator">:</span> RegExp
<span class="token number">07</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token number">08</span>   <span class="token function">setup</span><span class="token punctuation">(</span><span class="token parameter">props<span class="token punctuation">,</span> <span class="token punctuation">{</span> slots <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">09</span>     <span class="token comment">// 省略部分代码</span>
<span class="token number">10</span>
<span class="token number">11</span>     <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">12</span>       <span class="token keyword">let</span> rawVNode <span class="token operator">=</span> slots<span class="token punctuation">.</span><span class="token function">default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">13</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> rawVNode<span class="token punctuation">.</span>type <span class="token operator">!==</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">14</span>         <span class="token keyword">return</span> rawVNode
<span class="token number">15</span>       <span class="token punctuation">}</span>
<span class="token number">16</span>       <span class="token comment">// 获取“内部组件”的 name</span>
<span class="token number">17</span>       <span class="token keyword">const</span> name <span class="token operator">=</span> rawVNode<span class="token punctuation">.</span>type<span class="token punctuation">.</span>name
<span class="token number">18</span>       <span class="token comment">// 对 name 进行匹配</span>
<span class="token number">19</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>
<span class="token number">20</span>         name <span class="token operator">&amp;&amp;</span>
<span class="token number">21</span>         <span class="token punctuation">(</span>
<span class="token number">22</span>           <span class="token comment">// 如果 name 无法被 include 匹配</span>
<span class="token number">23</span>           <span class="token punctuation">(</span>props<span class="token punctuation">.</span>include <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>props<span class="token punctuation">.</span>include<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
<span class="token number">24</span>           <span class="token comment">// 或者被 exclude 匹配</span>
<span class="token number">25</span>           <span class="token punctuation">(</span>props<span class="token punctuation">.</span>exclude <span class="token operator">&amp;&amp;</span> props<span class="token punctuation">.</span>exclude<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">26</span>         <span class="token punctuation">)</span>
<span class="token number">27</span>       <span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">28</span>         <span class="token comment">// 则直接渲染“内部组件”，不对其进行后续的缓存操作</span>
<span class="token number">29</span>         <span class="token keyword">return</span> rawVNode
<span class="token number">30</span>       <span class="token punctuation">}</span>
<span class="token number">31</span>
<span class="token number">32</span>       <span class="token comment">// 省略部分代码</span>
<span class="token number">33</span>     <span class="token punctuation">}</span>
<span class="token number">34</span>   <span class="token punctuation">}</span>
<span class="token number">35</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="UJTeh"></a></p><h3 id="二-teleport组件的实现原理" tabindex="-1"><a class="header-anchor" href="#二-teleport组件的实现原理" aria-hidden="true">#</a> 二.Teleport组件的实现原理</h3><p>该组件的诞生是为了解决组件的层级关系不依赖与模板结构。就是说，父组件包了子组件，但是子组件最终挂载的地方并不是当前父组件下面。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">01</span> <span class="token operator">&lt;</span>Teleport to<span class="token operator">=</span><span class="token string">&quot;body&quot;</span><span class="token operator">&gt;</span>
<span class="token number">02</span>   <span class="token operator">&lt;</span>h1<span class="token operator">&gt;</span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">&gt;</span>
<span class="token number">03</span>   <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>content<span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">&gt;</span>
<span class="token number">04</span> <span class="token operator">&lt;</span><span class="token operator">/</span>Teleport<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>本身它的意思也很明确，就是将<code>children</code>全部挂载到<code>body</code>下面去。而且这个<code>to</code>属性还可以进行<code>v-bind</code>，也就是说，还是随便放 -_- 。<br>通过<code>dom</code>操作获取到指定的节点，然后将<code>children</code>挂载上去即可，后期更新的时候也只需要<code>patchChildren</code>即可。不过考虑到<code>to</code>的值会发送变化，所以要多加个特判来决定是否需要移动。<br><a name="HFmUL"></a></p><h3 id="三-transition组件的实现原理" tabindex="-1"><a class="header-anchor" href="#三-transition组件的实现原理" aria-hidden="true">#</a> 三.Transition组件的实现原理</h3><p>在设计原生的过渡效果的时候，需要考虑三个点，从哪来<code>(.enter_from)</code>,到哪去<code>(.enter_to)</code>，如何过渡<code>(.enter_active)</code>。当设计好这三个点后，过渡效果就呈现出来了。这三个点对挂载和卸载都有效。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 入场动画</span>
<span class="token number">01</span> <span class="token comment">// 创建 class 为 box 的 DOM 元素</span>
<span class="token number">02</span> <span class="token keyword">const</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
<span class="token number">03</span> el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span>
<span class="token number">04</span>
<span class="token number">05</span> <span class="token comment">// 在 DOM 元素被添加到页面之前，将初始状态和运动过程定义到元素上</span>
<span class="token number">06</span> el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;enter-from&#39;</span><span class="token punctuation">)</span>    <span class="token comment">// 初始状态</span>
<span class="token number">07</span> el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;enter-active&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 运动过程</span>
<span class="token number">08</span>
<span class="token number">09</span> <span class="token comment">// 将元素添加到页面</span>
<span class="token number">10</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
<span class="token number">11</span>
<span class="token number">12</span> <span class="token comment">// 嵌套调用 requestAnimationFrame</span>
<span class="token number">13</span> <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">14</span>   <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">15</span>     el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;enter-from&#39;</span><span class="token punctuation">)</span>  <span class="token comment">// 移除 enter-from</span>
<span class="token number">16</span>     el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;enter-to&#39;</span><span class="token punctuation">)</span>       <span class="token comment">// 添加 enter-to</span>
<span class="token number">17</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token comment">// 离场动画</span>
<span class="token number">01</span> el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">02</span>   <span class="token comment">// 将卸载动作封装到 performRemove 函数中</span>
<span class="token number">03</span>   <span class="token keyword">const</span> <span class="token function-variable function">performRemove</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> el<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>el<span class="token punctuation">)</span>
<span class="token number">04</span>
<span class="token number">05</span>   <span class="token comment">// 设置初始状态：添加 leave-from 和 leave-active 类</span>
<span class="token number">06</span>   el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;leave-from&#39;</span><span class="token punctuation">)</span>
<span class="token number">07</span>   el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;leave-active&#39;</span><span class="token punctuation">)</span>
<span class="token number">08</span>
<span class="token number">09</span>   <span class="token comment">// 强制 reflow：使初始状态生效</span>
<span class="token number">10</span>   document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetHeight
<span class="token number">11</span>
<span class="token number">12</span>   <span class="token comment">// 在下一帧切换状态</span>
<span class="token number">13</span>   <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">14</span>     <span class="token function">requestAnimationFrame</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">15</span>       <span class="token comment">// 切换到结束状态</span>
<span class="token number">16</span>       el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;leave-from&#39;</span><span class="token punctuation">)</span>
<span class="token number">17</span>       el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&#39;leave-to&#39;</span><span class="token punctuation">)</span>
<span class="token number">18</span>
<span class="token number">19</span>       <span class="token comment">// 监听 transitionend 事件做收尾工作</span>
<span class="token number">20</span>       el<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;transitionend&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">21</span>         el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;leave-to&#39;</span><span class="token punctuation">)</span>
<span class="token number">22</span>         el<span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">&#39;leave-active&#39;</span><span class="token punctuation">)</span>
<span class="token number">23</span>         <span class="token comment">// 当过渡完成后，记得调用 performRemove 函数将 DOM 元素移除</span>
<span class="token number">24</span>         <span class="token function">performRemove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">25</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token number">26</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token number">27</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token number">28</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>被<code>Transition</code>组件包装后的组件会添加一个<code>transition</code>属性，里面的内容就是一些关于<code>DOM</code>过渡的钩子。比如：<code>beforeEnter</code>，<code>enter</code>，<code>leave</code>。对于组件的过渡效果来说，具体体现的是在组件的进入和组件的退出。也就是<code>mounted</code>和<code>unmounted</code>这两个钩子。</p><blockquote><p>actived和unactived我不清楚是否也能激活过渡效果。</p></blockquote><p><a name="ApD4N"></a></p><h3 id="四-总结" tabindex="-1"><a class="header-anchor" href="#四-总结" aria-hidden="true">#</a> 四.总结</h3><p>这些内置组件的创建都跟渲染器有紧密联系，而他们的定义是基于组件上进行修改，利用插槽函数等。</p><ol><li>对于<code>KeepAlive</code>组件是借用了<code>HTTP</code>中的长连接的概率，解决了组件的反复挂载和卸载造成的额外开销。本质上的实现是将组件缓存下来。不过考虑到缓存过多成本也很大，所以引入了一些策略上的属性，<code>include</code>，<code>exclude</code>，<code>max</code>。</li></ol><blockquote><p>HTTP的长连接本质上是TCP的长连接，HTTP是TCP/IP协议簇的子集之一，是基于TCP/IP的应用层服务</p></blockquote><ol start="2"><li>对于<code>Teleport</code>组件来说，实现了跨越<code>DOM</code>层级完成渲染的功能。Teleport组件可以避免渲染器的代码膨胀，以及使打包体积更小的原因，主要是因为它可以将子组件的内容直接移动到指定位置，而不需要创建新的真实DOM节点。具体来说，Teleport组件的实现方式是使用了DOM中的&quot;移动&quot;（move）操作，实现了将子组件的内容渲染到指定的目标位置（target）中去。这样，通过Teleport组件渲染出的子组件内容，可以在视觉上被认为是在Teleport组件外渲染的，但实际上它们并没有被添加到任何额外的DOM节点中。这就避免了因为Teleport组件造成的额外DOM节点的创建，从而减少了渲染器的工作量和代码膨胀，降低了打包体积。</li><li>至于<code>Transition</code>组件，他就是进行对<code>DOM</code>的进场和离场做一个分析，然后讨论出三个钩子函数。然后在组件的进场和离场之前，将这些钩子函数执行，从而达到过渡效果。</li></ol>`,22);function d(m,v){const e=t("ExternalLinkIcon");return o(),c("div",null,[u,n("blockquote",null,[n("p",null,[s("webSocket和HTTP："),n("a",r,[s("https://zhuanlan.zhihu.com/p/113286469"),l(e)])])]),k])}const h=p(i,[["render",d],["__file","内建组件和模块.html.vue"]]);export{h as default};
