import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o,c,a as n,b as s,d as e,e as l}from"./app-e319b9e5.js";const u={},i=l(`<p><a name="z7N5A"></a></p><h5 id="_1-引言" tabindex="-1"><a class="header-anchor" href="#_1-引言" aria-hidden="true">#</a> 1.引言</h5><p>先聊聊什么是组件，组件的用法有两个用途</p><ul><li>拆分页面，让页面功能单一，不需要去管理庞大的页面模板。每个组件有自己职责，出事找对应组件即可。</li><li>复用，就跟抽离函数一样，页面有很多东西有时候也是可以复用的，所以将一些重复的或者会经常用到的抽离出来。<br><a name="xhkMT"></a></li></ul><h5 id="_2-组件的渲染" tabindex="-1"><a class="header-anchor" href="#_2-组件的渲染" aria-hidden="true">#</a> 2.组件的渲染</h5><p>对于不同的<code>vnode</code>，<code>patch</code>函数会采用不同的方案会进行渲染。组件也不例外，在<code>vnode</code>的层次上，组件的<code>vnode.type</code>是一个对象，毕竟他也不是任何一个标签。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">01</span> <span class="token keyword">function</span> <span class="token function">patch</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">02</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">&amp;&amp;</span> n1<span class="token punctuation">.</span>type <span class="token operator">!==</span> n2<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">03</span>     <span class="token function">unmount</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span>
<span class="token number">04</span>     n1 <span class="token operator">=</span> <span class="token keyword">null</span>
<span class="token number">05</span>   <span class="token punctuation">}</span>
<span class="token number">06</span>
<span class="token number">07</span>   <span class="token keyword">const</span> <span class="token punctuation">{</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> n2
<span class="token number">08</span>
<span class="token number">09</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">&#39;string&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">10</span>     <span class="token comment">// 作为普通元素处理</span>
<span class="token number">11</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> Text<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">12</span>     <span class="token comment">// 作为文本节点处理</span>
<span class="token number">13</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>type <span class="token operator">===</span> Fragment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">14</span>     <span class="token comment">// 作为片段处理</span>
<span class="token number">15</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> type <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">16</span>     <span class="token comment">// vnode.type 的值是选项对象，作为组件来处理</span>
<span class="token number">17</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>n1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">18</span>       <span class="token comment">// 挂载组件</span>
<span class="token number">19</span>       <span class="token function">mountComponent</span><span class="token punctuation">(</span>n2<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
<span class="token number">20</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token number">21</span>       <span class="token comment">// 更新组件</span>
<span class="token number">22</span>       <span class="token function">patchComponent</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
<span class="token number">23</span>     <span class="token punctuation">}</span>
<span class="token number">24</span>   <span class="token punctuation">}</span>
<span class="token number">25</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于这个对象里，他应该有一个<code>render</code>函数，用来返回该组件所对应的<code>vnode</code>。格式如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">01</span> <span class="token keyword">const</span> MyComponent <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token number">02</span>   <span class="token comment">// 组件名称，可选</span>
<span class="token number">03</span>   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;MyComponent&#39;</span><span class="token punctuation">,</span>
<span class="token number">04</span>   <span class="token comment">// 组件的渲染函数，其返回值必须为虚拟 DOM</span>
<span class="token number">05</span>   <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">06</span>     <span class="token comment">// 返回虚拟 DOM</span>
<span class="token number">07</span>     <span class="token keyword">return</span> <span class="token punctuation">{</span>
<span class="token number">08</span>       <span class="token literal-property property">type</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
<span class="token number">09</span>       <span class="token literal-property property">children</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">我是文本内容</span><span class="token template-punctuation string">\`</span></span>
<span class="token number">10</span>     <span class="token punctuation">}</span>
<span class="token number">11</span>   <span class="token punctuation">}</span>
<span class="token number">12</span> <span class="token punctuation">}</span>
<span class="token comment">// 挂载函数</span>
<span class="token number">01</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">02</span>   <span class="token comment">// 通过 vnode 获取组件的选项对象，即 vnode.type</span>
<span class="token number">03</span>   <span class="token keyword">const</span> componentOptions <span class="token operator">=</span> vnode<span class="token punctuation">.</span>type
<span class="token number">04</span>   <span class="token comment">// 获取组件的渲染函数 render</span>
<span class="token number">05</span>   <span class="token keyword">const</span> <span class="token punctuation">{</span> render <span class="token punctuation">}</span> <span class="token operator">=</span> componentOptions
<span class="token number">06</span>   <span class="token comment">// 执行渲染函数，获取组件要渲染的内容，即 render 函数返回的虚拟 DOM</span>
<span class="token number">07</span>   <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">08</span>   <span class="token comment">// 最后调用 patch 函数来挂载组件所描述的内容，即 subTree</span>
<span class="token number">09</span>   <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
<span class="token number">10</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过<code>render</code>所提供的<code>vnode</code>就可以将该组件渲染出来了。<br><a name="UvkDE"></a></p><h5 id="_3-组件状态与自更新" tabindex="-1"><a class="header-anchor" href="#_3-组件状态与自更新" aria-hidden="true">#</a> 3.组件状态与自更新</h5><p>对于响应式变量来说，如果跟页面双向绑定了。那变量的值改变的时候，页面应该需要重新渲染。而这些导致页面会重新渲染的变量，就叫做组件自身的状态。<br>所以基于组件自身的状态，我们可以设置一个监视器，用来监听是否有改变，如果改变，即重新渲染。</p><blockquote><p>不管是effect还是watch，都是利用副作用，而watch又是对effect的扩展，所以我干脆用监视器来描述。这里也可以说成添加一个对组件自身状态的副作用，功能是重新渲染</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">01</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">02</span>   <span class="token keyword">const</span> componentOptions <span class="token operator">=</span> vnode<span class="token punctuation">.</span>type
<span class="token number">03</span>   <span class="token keyword">const</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> componentOptions
<span class="token number">04</span>
<span class="token number">05</span>   <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">06</span>
<span class="token number">07</span>   <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">08</span>     <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
<span class="token number">09</span>     <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
<span class="token number">10</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
<span class="token number">11</span>     <span class="token comment">// 指定该副作用函数的调度器为 queueJob 即可</span>
<span class="token number">12</span>     <span class="token literal-property property">scheduler</span><span class="token operator">:</span> queueJob
<span class="token number">13</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token number">14</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码有两个缺陷，<br>一，状态反复修改，页面会反复渲染<br>二，每次都是<code>patch(null,subTree)</code>都是重新挂载<br>两个问题都会导致性能上产生不必要的开销。对于问题二，后期改成新旧组件比较即可解决。而问题一，个人见解是做一个防抖，书上是做了一个任务调度器<code>queueJob</code>，利用<code>set</code>收集响应函数，自动去重。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">01</span> <span class="token comment">// 任务缓存队列，用一个 Set 数据结构来表示，这样就可以自动对任务进行去重</span>
<span class="token number">02</span> <span class="token keyword">const</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">03</span> <span class="token comment">// 一个标志，代表是否正在刷新任务队列</span>
<span class="token number">04</span> <span class="token keyword">let</span> isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token number">05</span> <span class="token comment">// 创建一个立即 resolve 的 Promise 实例</span>
<span class="token number">06</span> <span class="token keyword">const</span> p <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">07</span>
<span class="token number">08</span> <span class="token comment">// 调度器的主要函数，用来将一个任务添加到缓冲队列中，并开始刷新队列</span>
<span class="token number">09</span> <span class="token keyword">function</span> <span class="token function">queueJob</span><span class="token punctuation">(</span><span class="token parameter">job</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">10</span>   <span class="token comment">// 将 job 添加到任务队列 queue 中</span>
<span class="token number">11</span>   queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>job<span class="token punctuation">)</span>
<span class="token number">12</span>   <span class="token comment">// 如果还没有开始刷新队列，则刷新之</span>
<span class="token number">13</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFlushing<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">14</span>     <span class="token comment">// 将该标志设置为 true 以避免重复刷新</span>
<span class="token number">15</span>     isFlushing <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token number">16</span>     <span class="token comment">// 在微任务中刷新缓冲队列</span>
<span class="token number">17</span>     p<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">18</span>       <span class="token keyword">try</span> <span class="token punctuation">{</span>
<span class="token number">19</span>         <span class="token comment">// 执行任务队列中的任务</span>
<span class="token number">20</span>         queue<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">job</span> <span class="token operator">=&gt;</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">21</span>       <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
<span class="token number">22</span>         <span class="token comment">// 重置状态</span>
<span class="token number">23</span>         isFlushing <span class="token operator">=</span> <span class="token boolean">false</span>
<span class="token number">24</span>         queue<span class="token punctuation">.</span>clear <span class="token operator">=</span> <span class="token number">0</span>
<span class="token number">25</span>       <span class="token punctuation">}</span>
<span class="token number">26</span>     <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token number">27</span>   <span class="token punctuation">}</span>
<span class="token number">28</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="pspEQ"></a></p><h5 id="_4-组件的实例与组件的生命周期" tabindex="-1"><a class="header-anchor" href="#_4-组件的实例与组件的生命周期" aria-hidden="true">#</a> 4.组件的实例与组件的生命周期</h5><p>基于上面的方案，对于组件的挂载，组件的销毁，组件的更新其实都表达的很明显了，而且对于上面的问题二，就是利用变量存储旧组件，然后通过判断是否有旧组件来进行决策执行<code>mounted</code>还是<code>update</code>，这样就讲这两个生命周期给分离了。<br>对于<code>create</code>生命周期是在组件状态设置好之前就调用的，所以他的位置也很清晰。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token number">01</span> <span class="token keyword">function</span> <span class="token function">mountComponent</span><span class="token punctuation">(</span><span class="token parameter">vnode<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">02</span>   <span class="token keyword">const</span> componentOptions <span class="token operator">=</span> vnode<span class="token punctuation">.</span>type
<span class="token number">03</span>   <span class="token comment">// 从组件选项对象中取得组件的生命周期函数</span>
<span class="token number">04</span>   <span class="token keyword">const</span> <span class="token punctuation">{</span> render<span class="token punctuation">,</span> data<span class="token punctuation">,</span> beforeCreate<span class="token punctuation">,</span> created<span class="token punctuation">,</span> beforeMount<span class="token punctuation">,</span> mounted<span class="token punctuation">,</span> beforeUpdate<span class="token punctuation">,</span> updated <span class="token punctuation">}</span> <span class="token operator">=</span> componentOptions
<span class="token number">05</span>
<span class="token number">06</span>   <span class="token comment">// 在这里调用 beforeCreate 钩子</span>
<span class="token number">07</span>   beforeCreate <span class="token operator">&amp;&amp;</span> <span class="token function">beforeCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token number">08</span>
<span class="token number">09</span>   <span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token number">10</span>
<span class="token number">11</span>   <span class="token keyword">const</span> instance <span class="token operator">=</span> <span class="token punctuation">{</span>
<span class="token number">12</span>     state<span class="token punctuation">,</span>
<span class="token number">13</span>     <span class="token literal-property property">isMounted</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
<span class="token number">14</span>     <span class="token literal-property property">subTree</span><span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token number">15</span>   <span class="token punctuation">}</span>
<span class="token number">16</span>   vnode<span class="token punctuation">.</span>component <span class="token operator">=</span> instance
<span class="token number">17</span>
<span class="token number">18</span>   <span class="token comment">// 在这里调用 created 钩子</span>
<span class="token number">19</span>   created <span class="token operator">&amp;&amp;</span> <span class="token function">created</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
<span class="token number">20</span>
<span class="token number">21</span>   <span class="token function">effect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
<span class="token number">22</span>     <span class="token keyword">const</span> subTree <span class="token operator">=</span> <span class="token function">render</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> state<span class="token punctuation">)</span>
<span class="token number">23</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>instance<span class="token punctuation">.</span>isMounted<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token number">24</span>       <span class="token comment">// 在这里调用 beforeMount 钩子</span>
<span class="token number">25</span>       beforeMount <span class="token operator">&amp;&amp;</span> <span class="token function">beforeMount</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
<span class="token number">26</span>       <span class="token function">patch</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
<span class="token number">27</span>       instance<span class="token punctuation">.</span>isMounted <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token number">28</span>       <span class="token comment">// 在这里调用 mounted 钩子</span>
<span class="token number">29</span>       mounted <span class="token operator">&amp;&amp;</span> <span class="token function">mounted</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
<span class="token number">30</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
<span class="token number">31</span>       <span class="token comment">// 在这里调用 beforeUpdate 钩子</span>
<span class="token number">32</span>       beforeUpdate <span class="token operator">&amp;&amp;</span> <span class="token function">beforeUpdate</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
<span class="token number">33</span>       <span class="token function">patch</span><span class="token punctuation">(</span>instance<span class="token punctuation">.</span>subTree<span class="token punctuation">,</span> subTree<span class="token punctuation">,</span> container<span class="token punctuation">,</span> anchor<span class="token punctuation">)</span>
<span class="token number">34</span>       <span class="token comment">// 在这里调用 updated 钩子</span>
<span class="token number">35</span>       updated <span class="token operator">&amp;&amp;</span> <span class="token function">updated</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span>
<span class="token number">36</span>     <span class="token punctuation">}</span>
<span class="token number">37</span>     instance<span class="token punctuation">.</span>subTree <span class="token operator">=</span> subTree
<span class="token number">38</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">scheduler</span><span class="token operator">:</span> queueJob <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token number">39</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><a name="iNbax"></a></p><h5 id="_5-props与组件的被动更新" tabindex="-1"><a class="header-anchor" href="#_5-props与组件的被动更新" aria-hidden="true">#</a> 5.props与组件的被动更新</h5><p>先理清组件的props有哪些？</p><ul><li>给组件的<code>props</code>：这也就是父子传值的<code>props</code></li><li>组件自身的<code>props</code>：<code>class</code>，<code>style</code></li></ul><p>第一个就是定义组件时的<code>props</code>，也就是通过<code>defineProps</code>内定义的内容，第二个更像是标签的属性。所以<code>vue</code>会通过<code>resolveProps</code>方法将两个<code>props</code>进行合并，并且提炼出<code>attrs</code>。</p>`,25),r={href:"https://cn.vuejs.org/guide/components/props.html",target:"_blank",rel:"noopener noreferrer"},k={href:"https://cn.vuejs.org/guide/components/events.html#defining-custom-events",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,[s("有了"),n("code",null,"props"),s("就可以来检测是否需要更新子组件了。当父组件的"),n("code",null,"props"),s("数据发生变化的时候，会触发父组件的重新渲染，此时渲染函数也会去更新子组件。这种更新叫做被动更新。"),n("br"),s("但是并不是所有的子组件都必须跟着父组件更新的，有时候只是父组件的状态有变化，但是对于子组件来说没有任何变化，此时子组件被动更新的话，这就是没必要的开销。")],-1),m=n("blockquote",null,[n("p",null,"代码检测props是否改变的通过调用hasPropsChanged方法。")],-1);function b(v,f){const a=t("ExternalLinkIcon");return o(),c("div",null,[i,n("blockquote",null,[n("p",null,[s("attrs：指的是传递给一个组件，却没有被该组件声明为 "),n("a",r,[s("props"),e(a)]),s(" 或 "),n("a",k,[s("emits"),e(a)]),s(" 的 attribute。")])]),d,m])}const w=p(u,[["render",b],["__file","组件实现原理.html.vue"]]);export{w as default};
