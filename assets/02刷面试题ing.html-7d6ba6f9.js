import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as c,c as l,b as n,d as s,e as t,a as e}from"./app-26dc17ae.js";const i={},u=n("h1",{id:"刷题笔记",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#刷题笔记","aria-hidden":"true"},"#"),s(" 刷题笔记")],-1),r=n("h3",{id:"前言",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前言","aria-hidden":"true"},"#"),s(" 前言")],-1),k=n("p",null,"该文章是我个人在平台上进行刷题得到的一些感悟，针对于大佬文章进对自己知识点的一个补充。有兴趣的可以看看。若有问题，欢迎大家指点，我只是小菜鸡。",-1),d={href:"https://juejin.cn/post/7004638318843412493",target:"_blank",rel:"noopener noreferrer"},v={href:"https://jsweeta.github.io/blogs/",target:"_blank",rel:"noopener noreferrer"},m=n("h3",{id:"_1-url-的输入到浏览器解析的一系列事件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-url-的输入到浏览器解析的一系列事件","aria-hidden":"true"},"#"),s(" 1.URL 的输入到浏览器解析的一系列事件")],-1),b=n("ul",null,[n("li",null,"查缓存"),n("li",null,"域名解析"),n("li",null,"tcp 连接"),n("li",null,"http 连接"),n("li",null,"构建渲染树"),n("li",null,"渲染"),n("li",null,"关闭 tcp")],-1),h={href:"https://juejin.cn/post/6844903832435032072",target:"_blank",rel:"noopener noreferrer"},g=e('<h5 id="补充一-强制缓存和协商缓存" tabindex="-1"><a class="header-anchor" href="#补充一-强制缓存和协商缓存" aria-hidden="true">#</a> 补充一：强制缓存和协商缓存</h5><p>缓存分为：强制缓存（200）和协商缓存（304）</p><ul><li>强制缓存：通过判断一些字段进行验证缓存是否失效，失效则<strong>重新请求并缓存</strong>，反之直接读取缓存信息。 <ul><li>Expires：有效期</li><li>Cache-Control：public,private,no-catch,no-store,max-age（有效期秒数）</li></ul></li></ul><blockquote><p>那么就可能会出现，缓存本身其实是没失效，但是假如服务器自己更改了。那么就可能读取不到最新数据</p></blockquote><ul><li>协商缓存：顾名思义，客户端与服务端进行协商。<strong>客户端</strong>进行请求时，先发个请求<strong>询问</strong>服务器数据是否有变化。有则重新请求，无则读取缓存。 <ul><li>If-Modified-Since：用修改时间进行比较</li><li>If-None-Match：用哈希值进行比较（<code>Etag</code>）</li></ul></li></ul><p><strong>注意</strong>：强制缓存是由服务器进行发起的，协商缓存是由客户端进行发起的。</p><h5 id="补充二-预检请求和询问请求" tabindex="-1"><a class="header-anchor" href="#补充二-预检请求和询问请求" aria-hidden="true">#</a> 补充二：预检请求和询问请求</h5><p>先说顺序：先预检请求 -&gt; 询问请求（假如有的话） -&gt; 真实请求</p><p>同理，三个请求就会有三个响应，所以会有<strong>六个</strong><code>TCP</code>数据包</p><ul><li>预检请求：针对于<strong>非简单请求</strong>的一个安全操作，是一个<strong>浏览器的行为</strong>。也就是所访问的服务器端，允不允许跨域。</li><li>询问请求：这是用于针对一些拥有<strong>大数据包</strong>的请求，<strong>避免浪费资源</strong>的一次询问操作，第一次询问是不带请求体，询问后如果允许，会返回<code>100 Continue</code>的响应码。客户端收到后，再进行发送实际的请求。</li></ul><p><strong>注意</strong>：预检请求时浏览器行为，也就是说，如果可以脱离浏览器环境，那么就不会有这个操作。而询问请求是一个优化策略，防止一些没必要的流量浪费。</p>',11),f={href:"https://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"},y=e(`<p><strong>补充三：回流和重绘</strong></p><p>回流一定会引发重绘，但是重绘不会引发回流</p><ul><li>回流：也叫做重新布局，一系列可能会导致盒子<strong>布局</strong>改变的都会触发回流。比如宽高，位置，内外边距等等。</li><li>重绘：重新填色，他与盒子的样式有关系，这里指的样式是指颜色那种东西，不会造成布局改变的</li></ul><p>如何避免？</p><p>对于<code>css3</code>我并不是很熟，所以也不敢多说什么，大致优化策略是这样：</p><p>回流和重绘会导致性能下降的原因可以归咎于他会<strong>抢占</strong>浏览器主线程的运行时机，从而导致页面看起来卡顿。解决方法就是避免抢占，比如开启一些<code>GPU</code>加速之类的东西。（-.-）这些我不是很懂。后期补上。</p><blockquote><p>因为这里涉及到了关于浏览器针对渲染分层的一些知识，什么渲染层啊，合成层啊啥啥啥的。</p></blockquote><h3 id="_2-事件代理" tabindex="-1"><a class="header-anchor" href="#_2-事件代理" aria-hidden="true">#</a> 2.事件代理</h3><p>由于每个<strong>事件处理器</strong>都会占用一定的内存，对于一些那种<strong>列表类型</strong>，但是都需要进行事件响应的，就可以进行一个事件代理，把 n 个消耗转换为 1 个消耗。</p><blockquote><p>除了事件代理，还可以利用<strong>防抖</strong>和<strong>节流</strong>进行优化，后续补上。</p></blockquote><h3 id="_3-关于-object-create" tabindex="-1"><a class="header-anchor" href="#_3-关于-object-create" aria-hidden="true">#</a> 3.关于 Object.create</h3><blockquote><p>以一个现有对象作为原型，创建一个新对象。 --MDN 官方解释</p></blockquote><p>以一个现有对象为原型，创建一个新对象。那么可以利用它实现<strong>寄生组合继承</strong>,<strong>new</strong></p><ul><li><strong>new</strong></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myNew</span><span class="token punctuation">(</span><span class="token parameter">fn<span class="token punctuation">,</span> <span class="token operator">...</span>rest</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 以fn的原型为基础，进行创建一个新的对象：之所以这么用，是考虑到当前这个fn可能继承了其他的。所以需要以他的原型为原型，如果不考虑继承，其实普通的obj也可以</span>
	<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>fn<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// 利用this指向改变的原理，通过call或者bind或者apply进行实例化构造</span>
	<span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">// new 如果有返回值会以返回值为实例对象</span>
	<span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">&quot;object&quot;</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> res <span class="token operator">===</span> <span class="token string">&quot;function&quot;</span> <span class="token operator">?</span> res <span class="token operator">:</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>补充</strong>：关于<code>this</code>指向的改变：xxx.fn(),<code>this</code>就指向 xxx，包括<code>call</code>，<code>bind</code>，<code>apply</code>都是进行一次包装使之当前的<code>fn</code>挂载到<strong>需要被指向</strong>的对象上，然后进行一次函数调用；</p><ul><li><strong>寄生组合继承</strong></li></ul><p>第一步：子类负责调用父类的构造方法（也就是<code>Parent.call(this)</code>）</p><p>第二步：将父类的原型赋予到子类的原型上去</p><p>第三步：更新子类构造函数的指向</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
		console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">play</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 调用父类构造方法：本质是this指向改变从而进行值的赋予</span>
	<span class="token function">Parent</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 改变原型的指向</span>
<span class="token class-name">Children</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Parent</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 改变构造器的指向：构造器本身是指向自己的，但是由于原型改变了，所以需要更新一下</span>
<span class="token class-name">Children</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Children<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>这里除了牵扯出这些知识，其实还可以引出<strong>原型链</strong>，<strong>箭头函数和普通函数的区别</strong>，<strong>以及其他几种继承的缺点</strong></p></blockquote><h3 id="_4-vue-nexttick-原理" tabindex="-1"><a class="header-anchor" href="#_4-vue-nexttick-原理" aria-hidden="true">#</a> 4.Vue nextTick 原理</h3><p>简而言之，优先想办法把需要执行的事件插入到<strong>微任务队列</strong>，其次才是其他任务队列。</p><ul><li><strong>Promise</strong>:<code>Promise.then</code>可以直接将事件推入微任务队列尾部。</li><li><strong>MutationObserver</strong>:它可以监听 dom 的变化，然后执行对应回调。</li><li><strong>setImmediate</strong>和<strong>setTimeout</strong>:利用浏览器事件循环进行塞入回调。</li></ul><blockquote><p>这次可接着询问：<strong>浏览器事件循环</strong>,<strong>观察者模式/发布订阅模式</strong></p></blockquote><hr><h1 id="手写题" tabindex="-1"><a class="header-anchor" href="#手写题" aria-hidden="true">#</a> 手写题</h1><h3 id="_1-对象扁平化" tabindex="-1"><a class="header-anchor" href="#_1-对象扁平化" aria-hidden="true">#</a> 1. 对象扁平化</h3><p>思路:针对对象和数组分别进行判断递归进行组合，利用<code>Object.keys</code></p><h3 id="_2-判断括号字符串是否有效" tabindex="-1"><a class="header-anchor" href="#_2-判断括号字符串是否有效" aria-hidden="true">#</a> 2. 判断括号字符串是否有效</h3><p>题目链接：</p><p>思路:利用栈进行一个回滚操作进行判断</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">isValid</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 构造哈希</span>
	<span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>
		<span class="token string-property property">&quot;)&quot;</span><span class="token operator">:</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">,</span>
		<span class="token string-property property">&quot;]&quot;</span><span class="token operator">:</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">,</span>
		<span class="token string-property property">&quot;}&quot;</span><span class="token operator">:</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token keyword">let</span> stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> t <span class="token keyword">of</span> s<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 如果是左则直接进入栈</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>t <span class="token operator">===</span> <span class="token string">&quot;(&quot;</span> <span class="token operator">||</span> t <span class="token operator">===</span> <span class="token string">&quot;[&quot;</span> <span class="token operator">||</span> t <span class="token operator">===</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 否则弹出一个进行匹配，匹配失败直接false</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> state<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">continue</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
	<span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-查找数组公共前缀" tabindex="-1"><a class="header-anchor" href="#_3-查找数组公共前缀" aria-hidden="true">#</a> 3. 查找数组公共前缀</h3>`,35),_={href:"https://leetcode.cn/problems/longest-common-prefix/",target:"_blank",rel:"noopener noreferrer"},w=e(`<p>思路:该题求的只是公共前缀，可以利用<code>startsWith</code>进行暴力求解</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">longestCommonPrefix</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">strs</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		res <span class="token operator">+=</span> i<span class="token punctuation">;</span>
		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> str <span class="token keyword">of</span> strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">return</span> res<span class="token operator">?.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-字符串最长的不重复子串" tabindex="-1"><a class="header-anchor" href="#_4-字符串最长的不重复子串" aria-hidden="true">#</a> 4. 字符串最长的不重复子串</h3>`,3),x={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/description/",target:"_blank",rel:"noopener noreferrer"},j=e(`<p>思路:滑动窗口，left 和 right 两个指针，向前前进，如果有相等的了，<code>left</code>就往前，反之<code>right</code>往后。然后记录最大值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">lengthOfLongestSubstring</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 左右指针和结果</span>
	<span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
		res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
	<span class="token keyword">while</span> <span class="token punctuation">(</span>right <span class="token operator">&lt;</span> s<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token comment">// 初始值</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>right<span class="token punctuation">)</span> right<span class="token operator">++</span><span class="token punctuation">;</span>
		<span class="token keyword">else</span> <span class="token punctuation">{</span>
			<span class="token comment">// 判断右边的是否在队列</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				left<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
				right<span class="token operator">++</span><span class="token punctuation">;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
		res <span class="token operator">=</span> res <span class="token operator">&gt;</span> right <span class="token operator">-</span> left <span class="token operator">?</span> res <span class="token operator">:</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-数组中第一个没出现的最小正整数" tabindex="-1"><a class="header-anchor" href="#_5-数组中第一个没出现的最小正整数" aria-hidden="true">#</a> 5. 数组中第一个没出现的最小正整数</h3>`,3),q={href:"https://leetcode.cn/problems/first-missing-positive/",target:"_blank",rel:"noopener noreferrer"},C=e(`<p>思路 1：利用<strong>哈希</strong>进行遍历搜索，从 0-n</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">firstMissingPositive</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
	<span class="token comment">// 哈希记录</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> nums<span class="token punctuation">)</span> <span class="token keyword">set</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token comment">// 假设都有，那么答案必是n + 1</span>
	<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">set</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>思路 2：借助假设都有，答案必是<code>n + 1</code>的条件，将数组中的正整数放置自己对应的位置，从而得到一个有序数组<code>[1,2,3,4]</code>,然后判断索引与值是否相等</p><h3 id="_6-怎么在制定数据源里面生成一个长度为-n-的不重复随机数组" tabindex="-1"><a class="header-anchor" href="#_6-怎么在制定数据源里面生成一个长度为-n-的不重复随机数组" aria-hidden="true">#</a> 6. 怎么在制定数据源里面生成一个长度为 n 的不重复随机数组</h3><p>思路 1：哈希判断是否被用过，用过则接着选</p><p>思路 2：用一个删一个，保证数据源都是没用过的</p><p>思路 3：一样是用一个删一个，但是这个删是类似于<code>冒泡算法</code>一样，先取一个出来，然后逐步递减随机区间，并且依次将取出来的值替换掉（跟思路 2 一样），得以保证数据源都是没取过的。</p>`,7);function P(L,N){const a=o("ExternalLinkIcon");return c(),l("div",null,[u,r,k,n("blockquote",null,[n("p",null,[s("文章原链接:"),n("a",d,[s("最新的前端大厂面经（详解答案） - 掘金 (juejin.cn)"),t(a)])]),n("p",null,[s("个人博客:"),n("a",v,[s("Jsweet 的博客 (jsweeta.github.io)"),t(a)])])]),m,b,n("blockquote",null,[n("p",null,[s("详细请看："),n("a",h,[s("史上最详细的经典面试题 从输入 URL 到看到页面发生了什么？ - 掘金 (juejin.cn)"),t(a)])])]),g,n("blockquote",null,[n("p",null,[n("a",f,[s("跨域资源共享 CORS 详解 - 阮一峰的网络日志 (ruanyifeng.com)"),t(a)])])]),y,n("p",null,[s("题目链接："),n("a",_,[s("14. 最长公共前缀 - 力扣（LeetCode）"),t(a)])]),w,n("p",null,[s("题目链接："),n("a",x,[s("3. 无重复字符的最长子串 - 力扣（LeetCode）"),t(a)])]),j,n("p",null,[s("题目链接："),n("a",q,[s("41. 缺失的第一个正数 - 力扣（LeetCode）"),t(a)])]),C])}const E=p(i,[["render",P],["__file","02刷面试题ing.html.vue"]]);export{E as default};
